---
- name: Run host setup tasks
  hosts: linux
  gather_facts: true
  module_defaults:
    community.docker.docker_container:
      default_host_ip: ""
      restart_policy: unless-stopped
      state: started
      comparisons:
        '*': strict
        env: allow_more_present
      security_opts:
        - "no-new-privileges:true"
      env:
        TZ: "Europe/London"
  tasks:
    - name: Update hosts
      ansible.builtin.include_role:
        name: update_hosts
        apply:
          become: true
          tags:
            - update
      tags:
        - update

    - name: Get service facts
      ansible.builtin.service_facts:
      tags:
        - setup
        - prometheus
        - docker
        - virt

    - name: Run standard setup tasks
      when: ansible_os_family == 'Debian'
      ansible.builtin.include_role:
        name: deb_setup
        apply:
          become: true
          tags:
            - setup
            - all
      tags:
        - setup
        - all

    - name: Setup NTP
      when: req_ntp | default(false)
      tags: ["time"]
      ansible.builtin.include_role:
        name: geerlingguy.ntp
        apply:
          become: true
          tags:
            - time
      vars:
        ntp_enabled: true
        ntp_timezone: "Europe/London"
        ntp_manage_config: true
        ntp_servers:
          - "10.10.0.1"

    - name: Setup Alloy
      when: req_monitor | default(false)
      tags:
        - prometheus
      ansible.builtin.include_role:
        name: grafana.grafana.alloy
        apply:
          become: true
          tags:
            - prometheus
      vars:
        alloy_env_file_vars:
          CUSTOM_ARGS: "--disable-reporting"
        alloy_config: |
          prometheus.exporter.unix "node" {
            cpu {
              guest = {{ (ansible_facts.virtualization_role == 'guest') | lower }}
            }
            disk {}
            ethtool {}
            hwmon {}
            ntp {}
            netclass {}
            netstat {}
            perf {}
            sysctl {}
            systemd {}
            vmstat {}
            netdev {
                device_exclude = "^(docker.*|br-.*|veth.*|tap.*|cni-podman.*|podman.*|tailscale.*)$"
            }
            filesystem {
              mount_points_exclude = "^/(dev|proc|run/credentials/.+|sys|var/lib/docker/.+|opt/shares/.+)($|/)"
            }
          }

          prometheus.scrape "node" {
            targets         = prometheus.exporter.unix.node.targets
            job_name        = "node-exporter"
            scrape_interval = "15s"
            forward_to      = [prometheus.relabel.node.receiver]
          }

          prometheus.relabel "node" {
            rule {
              target_label = "instance"
              replacement  = env("HOSTNAME")
            }
            forward_to = [prometheus.remote_write.prom.receiver]
          }

          prometheus.remote_write "prom" {
            endpoint {
              url = "https://prom.mcda.dev/api/v1/write"
            }
          }

          loki.source.journal "systemd" {
            max_age = "12h"
            labels = {
              job  = "systemd-journal",
              host = env("HOSTNAME"),
              source = "systemd",
            }
            forward_to = [loki.process.systemd.receiver]
          }

          loki.process "systemd" {
            stage.static_labels {
              values = {
                agent = "alloy",
                log_type = "systemd",
              }
            }

            stage.match {
              selector = "{job=\"systemd-journal\"}"
              stage.static_labels {
                values = {
                  service_type = "system",
                }
              }
            }

            forward_to = [loki.write.loki.receiver]
          }

          loki.source.file "varlog" {
            targets = [
              { __path__ = "/var/log/*.log", job = "linux-varlog", host = env("HOSTNAME"), source = "file" },
              { __path__ = "/var/log/syslog", job = "linux-syslog", host = env("HOSTNAME"), source = "file" },
              { __path__ = "/var/log/auth.log", job = "linux-auth", host = env("HOSTNAME"), source = "file" },
            ]
            forward_to = [loki.process.file_logs.receiver]
          }

          loki.process "file_logs" {
            stage.static_labels {
              values = {
                agent = "alloy",
                log_type = "file",
              }
            }
            forward_to = [loki.write.loki.receiver]
          }

          loki.process "add_labels" {
            stage.static_labels {
              values = { agent = "alloy" }
            }
            forward_to = [loki.write.loki.receiver]
          }

          loki.write "loki" {
            endpoint {
              url = "https://loki.mcda.dev/loki/api/v1/push"
            }
          }

    - name: Setup NUT client
      when: req_nut | default(false)
      tags:
        - nut
      block:
        - name: Lookup NUT secret
          ansible.builtin.set_fact:
            nut_client_password: "{{ lookup('ripplefcl.bwscache.secret', 'nut_pass').value }}"
          no_log: true

        - name: Install NUT client
          ansible.builtin.include_role:
            name: geerlingguy.nut_client
            apply:
              become: true
              tags:
                - nut
              no_log: true

    - name: Setup docker
      when:
        - req_docker | default(false)
      ansible.builtin.include_role:
        name: geerlingguy.docker
        apply:
          become: true
          tags:
            - docker
      tags:
        - docker

    - name: Configure meshmon
      when: req_meshmon | default(false)
      ansible.builtin.include_role:
        name: meshmon
        apply:
          become: true
          tags:
            - docker
            - meshmon
      tags:
        - docker
        - meshmon

    - name: Setup pods
      when:
        - pods is defined
      ansible.builtin.include_role:
        name: setup_pods
        apply:
          become: false
          tags:
            - docker
            - pods
      tags:
        - docker
        - pods

    - name: Setup monitoring stack
      when: inventory_hostname == 'sbc2'
      tags:
        - pods
        - monitor
      block:
        - name: Lookup monitor secrets
          ansible.builtin.set_fact:
            mktxp_pass: "{{ lookup('ripplefcl.bwscache.secret', 'mktxp_pass').value }}"
          no_log: true

        - name: Include monitor role
          ansible.builtin.include_role:
            name: monitor
            apply:
              tags:
                - pods
                - monitor

    # - name: Setup garage
    #   when: req_garage | default(false)
    #   tags:
    #     - pods
    #     - garage
    #   ansible.builtin.include_role:
    #     name: garage
    #     apply:
    #       tags:
    #         - pogs
    #         - garage

    - name: Setup libvirt
      when:
        - req_libvirt | default(false)
        - ansible_os_family == 'Debian'
      ansible.builtin.include_role:
        name: deb_libvirt
        apply:
          become: true
          tags:
            - virt
      tags:
        - virt
