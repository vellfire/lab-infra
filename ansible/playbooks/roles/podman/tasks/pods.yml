---
- name: Create directories from volume bind mounts (user pods)
  become: true
  ansible.builtin.file:
    path: "{{ volume.split(':')[0] }}"
    state: directory
    recurse: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  loop: "{{ ((user_pods | default([]) | selectattr('volume', 'defined') | map(attribute='volume') | list)
           + (user_pods | default([]) | selectattr('volumes', 'defined') | map(attribute='volumes') | list))
           | flatten }}"
  loop_control:
    loop_var: volume
    label: "{{ volume.split(':')[0] }}"
  when:
    - volume is string
    - "':' in volume"
    - volume.split(':')[0].startswith('/opt/pods/')
    - not (volume.split(':')[0] | basename | regex_search('\.'))
    - not (volume | regex_search(':U($|:)'))

- name: Create directories from volume bind mounts (system pods)
  become: true
  ansible.builtin.file:
    path: "{{ volume.split(':')[0] }}"
    state: directory
    recurse: true
    owner: root
    group: root
    mode: '0755'
  loop: "{{ ((system_pods | default([]) | selectattr('volume', 'defined') | map(attribute='volume') | list)
           + (system_pods | default([]) | selectattr('volumes', 'defined') | map(attribute='volumes') | list))
           | flatten }}"
  loop_control:
    loop_var: volume
    label: "{{ volume.split(':')[0] }}"
  when:
    - volume is string
    - "':' in volume"
    - volume.split(':')[0].startswith('/opt/pods/')
    - not (volume.split(':')[0] | basename | regex_search('\.'))
    - not (volume | regex_search(':U($|:)'))

- name: Create user podman quadlets  # noqa args[module]
  containers.podman.podman_container: >-
    {{
      pod | combine({
        'quadlet_options': (pod.quadlet_options | default([]))
          + (podman_quadlet_defaults | default([]))
      })
    }}
  loop: "{{ user_pods | default([]) }}"
  loop_control:
    label: "{{ pod.name }}"
    loop_var: pod
  register: podman_user_quadlet_results
  module_defaults:
    containers.podman.podman_container:
      state: quadlet
      quadlet_file_mode: '0644'

- name: Create system podman quadlets  # noqa args[module]
  become: true
  containers.podman.podman_container: >-
    {{
      pod | combine({
        'quadlet_options': (pod.quadlet_options | default([]))
          + (podman_quadlet_defaults | default([]))
      })
    }}
  loop: "{{ system_pods | default([]) }}"
  loop_control:
    label: "{{ pod.name }}"
    loop_var: pod
  register: podman_system_quadlet_results
  module_defaults:
    containers.podman.podman_container:
      state: quadlet
      quadlet_dir: /etc/containers/systemd
      quadlet_file_mode: '0644'

- name: Remove user quadlet files for absent pods
  ansible.builtin.file:
    path: "~/.config/containers/systemd/{{ pod.name }}.container"
    state: absent
  loop: "{{ user_pods | default([]) }}"
  loop_control:
    label: "{{ pod.name }}"
    loop_var: pod
  when: pod.state | default('present') == 'absent'
  register: podman_user_quadlet_removal_results

- name: Remove system quadlet files for absent pods
  become: true
  ansible.builtin.file:
    path: "/etc/containers/systemd/{{ pod.name }}.container"
    state: absent
  loop: "{{ system_pods | default([]) }}"
  loop_control:
    label: "{{ pod.name }}"
    loop_var: pod
  when: pod.state | default('present') == 'absent'
  register: podman_system_quadlet_removal_results

- name: Reload user daemon
  ansible.builtin.systemd_service:
    daemon_reload: true
    scope: user
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ ansible_facts.user_uid }}"
  when: podman_user_quadlet_results is changed or podman_user_quadlet_removal_results is changed

- name: Reload system daemon
  become: true
  ansible.builtin.systemd_service:
    daemon_reload: true
    scope: system
  when: podman_system_quadlet_results is changed or podman_system_quadlet_removal_results is changed

- name: Start user container services
  ansible.builtin.systemd_service:
    name: "{{ item.name }}.service"
    state: started
    scope: user
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ ansible_facts.user_uid }}"
  loop: "{{ user_pods | default([]) }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.state | default('present') != 'absent'

- name: Start system container services
  become: true
  ansible.builtin.systemd_service:
    name: "{{ item.name }}.service"
    state: started
    scope: system
  loop: "{{ system_pods | default([]) }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.state | default('present') != 'absent'

- name: Restart changed user container services
  ansible.builtin.systemd_service:
    name: "{{ item.name }}.service"
    state: restarted
    scope: user
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ ansible_facts.user_uid }}"
  loop: "{{ podman_user_quadlet_results.results | default([]) | selectattr('changed', 'equalto', true) | map(attribute='pod') | list }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.state | default('present') != 'absent'

- name: Restart changed system container services
  become: true
  ansible.builtin.systemd_service:
    name: "{{ item.name }}.service"
    state: restarted
    scope: system
  loop: "{{ podman_system_quadlet_results.results | default([]) | selectattr('changed', 'equalto', true) | map(attribute='pod') | list }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.state | default('present') != 'absent'
