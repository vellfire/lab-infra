---
- name: Create directories from volume bind mounts
  become: true
  ansible.builtin.file:
    path: "{{ volume.split(':')[0] }}"
    state: directory
    recurse: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  loop: "{{ pods | selectattr('volume', 'defined') | map(attribute='volume') | flatten }}"
  loop_control:
    loop_var: volume
    label: "{{ volume.split(':')[0] }}"
  when:
    - volume is string
    - "':' in volume"
    - volume.split(':')[0].startswith('/opt/pods/')

- name: Create podman quadlets
  module_defaults:
    containers.podman.podman_container:
      state: quadlet
      quadlet_file_mode: '0644'
  block:
    - name: Create podman quadlets  # noqa args[module]
      containers.podman.podman_container: >-
        {{
          pod | combine({
            'quadlet_options': (pod.quadlet_options | default([]))
              + (podman_quadlet_defaults | default([]))
          })
        }}
      loop: "{{ pods }}"
      loop_control:
        label: "{{ pod.name }}"
        loop_var: pod
      register: podman_quadlet_results

- name: Remove quadlet files for absent pods
  ansible.builtin.file:
    path: "~/.config/containers/systemd/{{ pod.name }}.container"
    state: absent
  loop: "{{ pods }}"
  loop_control:
    label: "{{ pod.name }}"
    loop_var: pod
  when: pod.state | default('present') == 'absent'
  register: podman_quadlet_removal_results

- name: Set fact for changed containers
  ansible.builtin.set_fact:
    podman_changed_pods: "{{ podman_quadlet_results.results | selectattr('changed', 'equalto', true) | map(attribute='pod') | list }}"

- name: Reload user daemon
  ansible.builtin.systemd_service:
    daemon_reload: true
    scope: user
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ ansible_facts.user_uid }}"
  when: podman_quadlet_results is changed or podman_quadlet_removal_results is changed

- name: Start container services
  ansible.builtin.systemd_service:
    name: "{{ item.name }}.service"
    state: started
    scope: user
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ ansible_facts.user_uid }}"
  loop: "{{ pods }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.state | default('present') != 'absent'

- name: Restart changed container services
  ansible.builtin.systemd_service:
    name: "{{ item.name }}.service"
    state: restarted
    scope: user
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ ansible_facts.user_uid }}"
  loop: "{{ podman_changed_pods }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - podman_changed_pods | length > 0
    - item.state | default('present') != 'absent'
